name: Release new docker image containing the base environment

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      push:
        description: "Push the released image to docker registry (yes or no, default no)"
  workflow_call:
    inputs:
      push:
        description: "Push the released image to docker registry (yes or no, default no)"
        type: string
    secrets:
      CI_REGISTRY_USER:
        description: "Docker Hub username"
      CI_REGISTRY_PASSWORD:
        description: "Token that enables writing to Docker Hub"

env:
  IMAGE_PREFIX: femonkaggle/base_images

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - uses: actions/checkout@v4
      - name: Determine backend info from an actual kaggle image
        run: |
          KAGGLE_IMAGE=gcr.io/kaggle-images/python
          KAGGLE_IMAGE_TAG=staging
          sudo cp -rf /var/lib/docker /mnt/
          sudo rm -rf /var/lib/docker
          sudo ln -s /mnt/docker /var/lib/
          sudo systemctl restart docker
          docker pull ${KAGGLE_IMAGE}:${KAGGLE_IMAGE_TAG}
          docker run --rm ${KAGGLE_IMAGE}:${KAGGLE_IMAGE_TAG} apt list --installed > apt-list.txt
          docker run --rm ${KAGGLE_IMAGE}:${KAGGLE_IMAGE_TAG} python3 -m pip freeze > pip-freeze.txt
          docker run --rm ${KAGGLE_IMAGE}:${KAGGLE_IMAGE_TAG} bash -c 'echo ${GIT_COMMIT}' > git-commit.txt
          docker rmi $(docker images ${KAGGLE_IMAGE} -a -q)
        shell: bash
      - name: Store backend info as artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-info
          path: |
            apt-list.txt
            pip-freeze.txt
            git-commit.txt
      - name: Determine whether to push the released image to docker registry
        id: push
        run: |
          PUSH=${{ (inputs || github.event.inputs).push }}
          if [[ "${PUSH}" == "yes" ]]; then
            echo "push=yes" >> ${GITHUB_OUTPUT}
          else
            echo "push=no" >> ${GITHUB_OUTPUT}
          fi
        shell: bash
      - name: Build docker image
        run: |
          docker build --pull -t ${IMAGE_PREFIX}:latest -f base/Dockerfile .
      - name: Determine image tag
        if: github.repository == 'fem-on-kaggle/fem-on-kaggle' && steps.push.outputs.push == 'yes'
        id: image_name
        run: |
          IMAGE_TAG=$(docker run -i ${IMAGE_PREFIX}:latest bash /usr/bin/compute_docker_tag.sh)
          echo "image_tag=${IMAGE_TAG}" >> ${GITHUB_OUTPUT}
      - name: Log into the docker registry
        if: github.repository == 'fem-on-kaggle/fem-on-kaggle' && steps.push.outputs.push == 'yes'
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }}
      - name: Push to the docker registry
        if: github.repository == 'fem-on-kaggle/fem-on-kaggle' && steps.push.outputs.push == 'yes'
        run: |
          IMAGE_TAG="${{ steps.image_name.outputs.image_tag }}"
          docker tag ${IMAGE_PREFIX}:latest ${IMAGE_PREFIX}:${IMAGE_TAG}
          docker push ${IMAGE_PREFIX}:latest
          docker push ${IMAGE_PREFIX}:${IMAGE_TAG}
